"use client"

import React, { useState, useRef, useEffect } from "react"
import { motion, AnimatePresence, useDragControls } from "framer-motion"
import { X, Send, Bot, Minimize2, Maximize2, RotateCcw } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"

interface ChatbotProps {
  onClose: () => void
}

interface Message {
  id: string
  text: string
  sender: "user" | "bot"
  timestamp: Date
}

interface QuickReply {
  id: string
  text: string
  response: string
}

const Chatbot = ({ onClose }: ChatbotProps) => {
  const [isMinimized, setIsMinimized] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "welcome",
      text: "Xin ch√†o! T√¥i l√† MSC Assistant ü§ñ\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ T√¨m hi·ªÉu v·ªÅ c√°c kh√≥a h·ªçc\n‚Ä¢ Th√¥ng tin v·ªÅ mentors\n‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t\n‚Ä¢ T∆∞ v·∫•n l·ªô tr√¨nh h·ªçc t·∫≠p",
      sender: "bot",
      timestamp: new Date(),
    },
  ])
  const [inputMessage, setInputMessage] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const dragControls = useDragControls()

  const quickReplies: QuickReply[] = [
    {
      id: "courses",
      text: "üìö Kh√≥a h·ªçc n√†o ph√π h·ª£p v·ªõi t√¥i?",
      response:
        "Tuy·ªát v·ªùi! ƒê·ªÉ t∆∞ v·∫•n kh√≥a h·ªçc ph√π h·ª£p nh·∫•t, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt:\n\nüéØ M·ª•c ti√™u h·ªçc t·∫≠p c·ªßa b·∫°n?\nüíº Kinh nghi·ªám hi·ªán t·∫°i?\n‚è∞ Th·ªùi gian c√≥ th·ªÉ d√†nh ƒë·ªÉ h·ªçc?",
    },
    {
      id: "mentors",
      text: "üë®‚Äçüè´ Th√¥ng tin v·ªÅ mentors",
      response:
        "MSC Center c√≥ ƒë·ªôi ng≈© mentors gi√†u kinh nghi·ªám:\n\n‚≠ê 50+ mentors chuy√™n nghi·ªáp\nüè¢ T·ª´ c√°c c√¥ng ty h√†ng ƒë·∫ßu\nüéì Kinh nghi·ªám 5-15 nƒÉm\nüí° Chuy√™n m√¥n ƒëa d·∫°ng",
    },
    {
      id: "support",
      text: "üîß H·ªó tr·ª£ k·ªπ thu·∫≠t",
      response:
        "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n:\n\nüîê V·∫•n ƒë·ªÅ ƒëƒÉng nh·∫≠p\nüì± L·ªói tr√™n mobile/desktop\nüé• Kh√¥ng xem ƒë∆∞·ª£c video\nüìä Theo d√µi ti·∫øn ƒë·ªô h·ªçc\nüí≥ Thanh to√°n kh√≥a h·ªçc",
    },
  ]

  const botResponses = {
    greeting: [
      "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? üòä",
      "Ch√†o b·∫°n! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n h√¥m nay! üåü",
      "Hello! T√¥i l√† MSC Assistant, s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n! ü§ñ",
    ],
    thanks: [
      "Kh√¥ng c√≥ g√¨! T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n! üòä",
      "R·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! C√≤n g√¨ kh√°c kh√¥ng? üåü",
      "C·∫£m ∆°n b·∫°n! H√£y li√™n h·ªá b·∫•t c·ª© khi n√†o c·∫ßn h·ªó tr·ª£! üíô",
    ],
    default: [
      "T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m v·ªÅ v·∫•n ƒë·ªÅ n√†y. B·∫°n c√≥ th·ªÉ g·ªçi hotline ho·∫∑c g·ª≠i email ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ chi ti·∫øt h∆°n.",
      "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i s·∫Ω chuy·ªÉn y√™u c·∫ßu c·ªßa b·∫°n ƒë·∫øn ƒë·ªôi ng≈© chuy√™n m√¥n.",
      "T√¥i ƒëang h·ªçc h·ªèi th√™m ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y t·ªët h∆°n! ü§ñ",
    ],
  }

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const simulateTyping = () => {
    setIsTyping(true)
    setTimeout(() => setIsTyping(false), 1000 + Math.random() * 2000)
  }

  const getBotResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase()
    if (message.includes("xin ch√†o") || message.includes("hello") || message.includes("hi")) {
      return botResponses.greeting[Math.floor(Math.random() * botResponses.greeting.length)]
    }
    if (message.includes("c·∫£m ∆°n") || message.includes("thanks") || message.includes("thank you")) {
      return botResponses.thanks[Math.floor(Math.random() * botResponses.thanks.length)]
    }
    return botResponses.default[Math.floor(Math.random() * botResponses.default.length)]
  }

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault()
    if (!inputMessage.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputMessage,
      sender: "user",
      timestamp: new Date(),
    }
    setMessages((prev) => [...prev, userMessage])
    setInputMessage("")
    simulateTyping()

    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: getBotResponse(inputMessage),
        sender: "bot",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, botResponse])
    }, 1500 + Math.random() * 1500)
  }

  const handleQuickReply = (reply: QuickReply) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      text: reply.text,
      sender: "user",
      timestamp: new Date(),
    }
    setMessages((prev) => [...prev, userMessage])
    simulateTyping()
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: reply.response,
        sender: "bot",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, botResponse])
    }, 1000)
  }

  const resetChat = () => {
    setMessages([
      {
        id: "welcome",
        text: "Xin ch√†o! T√¥i l√† MSC Assistant ü§ñ\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ T√¨m hi·ªÉu v·ªÅ c√°c kh√≥a h·ªçc\n‚Ä¢ Th√¥ng tin v·ªÅ mentors\n‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t\n‚Ä¢ T∆∞ v·∫•n l·ªô tr√¨nh h·ªçc t·∫≠p",
        sender: "bot",
        timestamp: new Date(),
      },
    ])
  }

  return (
    <motion.div
      drag
      dragControls={dragControls}
      dragListener={false}
      dragMomentum={false}
      className="w-[20rem] max-w-[90vw] sm:w-[18rem]"
      style={{
    height: isMinimized ? "60px" : "500px",
    transition: "height 0.3s ease-out",
  }}


    >
      <Card className="h-full flex flex-col shadow-2xl border-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-xl overflow-hidden rounded-2xl">
        <CardHeader
          className="bg-gradient-to-r from-blue-600 to-teal-600 text-white p-4 flex-shrink-0 cursor-grab active:cursor-grabbing"
          onPointerDown={(e) => dragControls.start(e)}
        >
          <div className="flex items-center justify-between">
            <CardTitle className="text-lg flex items-center gap-2">
              <Bot className="h-6 w-6" />
              <div>
                <div className="font-semibold">MSC Assistant</div>
                <div className="text-xs text-blue-100">Tr·ª±c tuy·∫øn</div>
              </div>
            </CardTitle>
            <div className="flex items-center gap-1">
              <Button variant="ghost" size="icon" onClick={resetChat} className="text-white hover:bg-white/20 h-8 w-8">
                <RotateCcw className="h-4 w-4" />
              </Button>
              <Button variant="ghost" size="icon" onClick={() => setIsMinimized(!isMinimized)} className="text-white hover:bg-white/20 h-8 w-8">
                {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
              </Button>
              <Button variant="ghost" size="icon" onClick={onClose} className="text-white hover:bg-white/20 h-8 w-8">
                <X className="h-4 w-4" />
                           </Button>
            </div>
          </div>
        </CardHeader>

        {/* N·ªôi dung chat */}
        <AnimatePresence>
          {!isMinimized && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="flex-1 flex flex-col min-h-0"
            >
              <CardContent className="flex-1 flex flex-col p-0 min-h-0">
                {/* Tin nh·∫Øn */}
                <ScrollArea className="flex-1 p-4 space-y-3 overflow-y-auto">
                  {messages.map((msg) => (
                    <div
                      key={msg.id}
                      className={`flex ${msg.sender === "user" ? "justify-end" : "justify-start"}`}
                    >
                      <div
                        className={`max-w-[80%] px-4 py-2 rounded-xl text-sm whitespace-pre-line ${
                          msg.sender === "user"
                            ? "bg-blue-600 text-white"
                            : "bg-gray-100 dark:bg-gray-800 dark:text-white"
                        }`}
                      >
                        {msg.text}
                      </div>
                    </div>
                  ))}
                  {isTyping && (
                    <div className="text-xs text-gray-400 dark:text-gray-500 italic">ƒêang ph·∫£n h·ªìi...</div>
                  )}
                  <div ref={messagesEndRef} />
                </ScrollArea>

                {/* Quick Replies */}
                <div className="px-4 pt-2 pb-1 border-t border-gray-200 dark:border-gray-700">
                  <div className="flex flex-wrap gap-2 mb-2">
                    {quickReplies.map((reply) => (
                      <Button
                        key={reply.id}
                        variant="outline"
                        size="sm"
                        onClick={() => handleQuickReply(reply)}
                        className="text-sm"
                      >
                        {reply.text}
                      </Button>
                    ))}
                  </div>

                  {/* Input */}
                  <form onSubmit={handleSendMessage} className="flex gap-2 items-center">
                    <Input
                      value={inputMessage}
                      onChange={(e) => setInputMessage(e.target.value)}
                      placeholder="Nh·∫≠p tin nh·∫Øn..."
                      className="flex-1"
                    />
                    <Button type="submit" size="icon" className="bg-blue-600 text-white hover:bg-blue-700">
                      <Send className="h-5 w-5" />
                    </Button>
                  </form>
                </div>
              </CardContent>
            </motion.div>
          )}
        </AnimatePresence>
      </Card>
    </motion.div>
  )
}

export default Chatbot