'use client'

import { createBrowserClient } from '@supabase/ssr'

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL!
const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

// Client-only Supabase client for browser
export function createClient() {
  return createBrowserClient(
    SUPABASE_URL,
    SUPABASE_ANON_KEY
  )
}

// Types exports - Simple client types
export interface UserData {
  id?: string
  email: string
  name: string
  fullName: string
  avatar?: string
  phone?: string
  university?: string
  major?: string
  role?: string
  status?: string
  created_at?: string
  updated_at?: string
}

export interface RegisterData {
  email: string
  password: string
  name: string
  fullName: string
  phone?: string
  confirmPassword?: string
  university?: string
  major?: string
}

export interface Program {
  id: string // uuid from database
  title: string
  description?: string
  detailed_content?: string
  highlights?: string[] // jsonb from database
  duration?: string
  price?: string // character varying in database
  image?: string
  slug?: string
  level?: string
  category?: string
  students?: string // character varying in database
  created_at: string
  updated_at: string
}

export interface Project {
  id: string
  title: string
  description: string
  image?: string
  technologies?: string[]
  mentors?: any[]
  status?: 'ongoing' | 'completed' | 'planning'
  slug?: string
  category?: string
}

export interface BlogPost {
  id: string
  title: string
  content?: string
  excerpt?: string
  image?: string
  author?: string
  author_avatar?: string
  published_at?: string
  publish_date?: string
  read_time?: string
  created_at?: string
  tags?: string[]
  category?: string
  slug?: string
}

// Simple API for client-side operations
export const api = {
  // Programs
  getPrograms: async (): Promise<Program[]> => {
    try {
      console.log('üîç Starting getPrograms API call...')
      console.log('üîç SUPABASE_URL:', SUPABASE_URL)
      console.log('üîç SUPABASE_ANON_KEY:', SUPABASE_ANON_KEY ? 'Present' : 'Missing')
      
      const supabase = createClient()
      console.log('üîç Supabase client created successfully')
      
      const { data, error } = await supabase
        .from('programs')
        .select('*')
      
      console.log('üîç Supabase query executed')
      console.log('üîç Error:', error)
      console.log('üîç Data:', data)
      console.log('üîç Data length:', data?.length || 0)
      
      if (error) {
        console.error('‚ùå Supabase error:', error)
        throw error
      }
      
      // If no data from Supabase, return mock data for testing
      if (!data || data.length === 0) {
        console.log('‚ö†Ô∏è No data from Supabase, returning mock data for testing...')
        const mockPrograms: Program[] = [
          {
            id: '1',
            title: 'Digital Marketing Mastery',
            description: 'H·ªçc c√°c k·ªπ nƒÉng marketing digital t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao, bao g·ªìm SEO, SEM, Social Media Marketing v√† Analytics.',
            detailed_content: 'Kh√≥a h·ªçc to√†n di·ªán v·ªÅ Digital Marketing v·ªõi 40+ gi·ªù h·ªçc th·ª±c h√†nh.',
            duration: '12 tu·∫ßn',
            level: 'Trung b√¨nh',
            price: '5.000.000',
            students: '150',
            category: 'Marketing',
            highlights: [
              'X√¢y d·ª±ng chi·∫øn l∆∞·ª£c marketing t·ªïng th·ªÉ',
              'Qu·∫£n l√Ω qu·∫£ng c√°o Facebook & Google Ads',
              'Ph√¢n t√≠ch v√† b√°o c√°o hi·ªáu qu·∫£ campaign',
              'T·ªëi ∆∞u h√≥a ROI v√† chuy·ªÉn ƒë·ªïi',
              'Th·ª±c h√†nh v·ªõi d·ª± √°n th·ª±c t·∫ø'
            ],
            image: '/dao-tao/digitalmarketing.webp',
            slug: 'digital-marketing-mastery',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          },
          {
            id: '2',
            title: 'Project Management Professional',
            description: 'Kh√≥a h·ªçc qu·∫£n l√Ω d·ª± √°n chuy√™n nghi·ªáp theo chu·∫©n PMP, ph√π h·ª£p cho c√°c qu·∫£n l√Ω v√† leader mu·ªën n√¢ng cao k·ªπ nƒÉng.',
            detailed_content: 'H·ªçc c√°c ph∆∞∆°ng ph√°p qu·∫£n l√Ω d·ª± √°n hi·ªán ƒë·∫°i nh∆∞ Agile, Scrum, Waterfall.',
            duration: '16 tu·∫ßn',
            level: 'N√¢ng cao',
            price: '8.000.000',
            students: '89',
            category: 'Qu·∫£n l√Ω',
            highlights: [
              'H·ªçc ph∆∞∆°ng ph√°p Agile v√† Scrum',
              'Qu·∫£n l√Ω r·ªßi ro v√† ch·∫•t l∆∞·ª£ng d·ª± √°n',
              'L·∫≠p k·∫ø ho·∫°ch v√† ki·ªÉm so√°t ti·∫øn ƒë·ªô',
              'Giao ti·∫øp v√† l√£nh ƒë·∫°o nh√≥m',
              'Chu·∫©n b·ªã thi ch·ª©ng ch·ªâ PMP'
            ],
            image: '/dao-tao/PMP.webp',
            slug: 'project-management-professional',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          },
          {
            id: '3',
            title: 'Leadership Development Program',
            description: 'Ph√°t tri·ªÉn k·ªπ nƒÉng l√£nh ƒë·∫°o v√† qu·∫£n l√Ω nh√≥m hi·ªáu qu·∫£ trong m√¥i tr∆∞·ªùng kinh doanh hi·ªán ƒë·∫°i.',
            detailed_content: 'Ch∆∞∆°ng tr√¨nh ph√°t tri·ªÉn l√£nh ƒë·∫°o to√†n di·ªán v·ªõi c√°c module th·ª±c h√†nh v√† coaching c√° nh√¢n.',
            duration: '14 tu·∫ßn',
            level: 'N√¢ng cao',
            price: '7.500.000',
            students: '125',
            category: 'L√£nh ƒë·∫°o',
            highlights: [
              'Ph√°t tri·ªÉn t∆∞ duy l√£nh ƒë·∫°o chi·∫øn l∆∞·ª£c',
              'K·ªπ nƒÉng giao ti·∫øp v√† thuy·∫øt tr√¨nh',
              'Qu·∫£n l√Ω xung ƒë·ªôt v√† ƒë√†m ph√°n',
              'X√¢y d·ª±ng team hi·ªáu su·∫•t cao',
              'Coaching v√† mentoring skills'
            ],
            image: '/dao-tao/leadership.webp',
            slug: 'leadership-development-program',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }
        ]
        
        return mockPrograms
      }
      
      console.log('‚úÖ Programs fetched successfully:', data?.length || 0, 'records')
      return data || []
    } catch (error) {
      console.error('‚ùå Error fetching programs:', error)
      return []
    }
  },

  // Projects
  getProjects: async (): Promise<Project[]> => {
    try {
      console.log('üîç Starting getProjects API call...')
      
      const supabase = createClient()
      const { data, error } = await supabase
        .from('projects')
        .select('*')
      
      console.log('üîç Projects query executed')
      console.log('üîç Error:', error)
      console.log('üîç Data:', data)
      console.log('üîç Data length:', data?.length || 0)
      
      if (error) {
        console.error('‚ùå Supabase error:', error)
        throw error
      }
      
      // If no data from Supabase, return mock data for testing
      if (!data || data.length === 0) {
        console.log('‚ö†Ô∏è No projects from Supabase, returning mock data for testing...')
        const mockProjects: Project[] = [
          {
            id: '1',
            title: 'Binemo - Transformasi Digital Banking',
            description: 'D·ª± √°n ƒë√†o t·∫°o chuy·ªÉn ƒë·ªïi s·ªë to√†n di·ªán cho ng√¢n h√†ng Binemo, n√¢ng cao nƒÉng l·ª±c nh√¢n s·ª± trong lƒ©nh v·ª±c fintech v√† d·ªãch v·ª• ng√¢n h√†ng s·ªë.',
            category: 'Fintech',
            status: 'completed',
            image: '/Projects/binemo.webp',
            slug: 'binemo-digital-banking-transformation',
            technologies: ['Digital Banking', 'Customer Experience', 'Data Analytics', 'Risk Management'],
            mentors: [
              { id: '1', name: 'ƒê·∫∑ng Do√£n Minh', avatar: '/Mentors/DDM.webp' },
              { id: '2', name: 'Ho√†ng Ch√¢u Long', avatar: '/Mentors/HCL.webp' }
            ]
          },
          {
            id: '2',
            title: 'VNPT - Ch∆∞∆°ng tr√¨nh Ph√°t tri·ªÉn L√£nh ƒë·∫°o',
            description: 'ƒê√†o t·∫°o k·ªπ nƒÉng l√£nh ƒë·∫°o v√† qu·∫£n l√Ω cho ƒë·ªôi ng≈© middle management c·ªßa VNPT, t·∫≠p trung v√†o digital transformation v√† innovation.',
            category: 'Vi·ªÖn th√¥ng',
            status: 'completed',
            image: '/Projects/VNPT.webp',
            slug: 'vnpt-leadership-development',
            technologies: ['Leadership Skills', 'Change Management', 'Digital Strategy'],
            mentors: [
              { id: '3', name: 'L√™ Ng·ªçc Th√†nh C√¥ng', avatar: '/Mentors/LNTC.webp' },
              { id: '4', name: 'Nguy·ªÖn C√¥ng Ti·∫øn', avatar: '/Mentors/NCT.webp' }
            ]
          },
          {
            id: '3',
            title: 'Einstein School - ƒê√†o t·∫°o Gi√°o vi√™n STEM',
            description: 'Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o gi√°o vi√™n STEM hi·ªán ƒë·∫°i, ·ª©ng d·ª•ng c√¥ng ngh·ªá trong gi·∫£ng d·∫°y v√† ph√°t tri·ªÉn t∆∞ duy s√°ng t·∫°o cho h·ªçc sinh.',
            category: 'Gi√°o d·ª•c',
            status: 'completed',
            image: '/Projects/einsteinschool.webp',
            slug: 'einstein-school-stem-training',
            technologies: ['STEM Education', 'Educational Technology', 'Creative Teaching'],
            mentors: [
              { id: '5', name: 'Ph·∫°m H·ªìng An', avatar: '/Mentors/PHA.webp' }
            ]
          },
          {
            id: '4',
            title: 'Happyland - Customer Experience Excellence',
            description: 'D·ª± √°n n√¢ng cao tr·∫£i nghi·ªám kh√°ch h√†ng cho chu·ªói gi·∫£i tr√≠ Happyland, ƒë√†o t·∫°o to√†n di·ªán v·ªÅ service excellence v√† customer relationship.',
            category: 'Gi·∫£i tr√≠',
            status: 'completed',
            image: '/Projects/Happyland.webp',
            slug: 'happyland-customer-experience',
            technologies: ['Customer Service', 'Experience Design', 'CRM Management'],
            mentors: [
              { id: '6', name: 'Ph·∫°m Ph√∫ Hi·ªÅn', avatar: '/Mentors/PPH.webp' },
              { id: '7', name: 'Tr·∫ßn L√™ B·∫£o Ch√¢u', avatar: '/Mentors/TLBC.webp' }
            ]
          },
          {
            id: '5',
            title: 'Fdeli - Digital Marketing Mastery',
            description: 'ƒê√†o t·∫°o digital marketing cho team Fdeli, t·∫≠p trung v√†o social media marketing, content strategy v√† performance analytics.',
            category: 'Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠',
            status: 'completed',
            image: '/Projects/Fdeli.webp',
            slug: 'fdeli-digital-marketing',
            technologies: ['Social Media Marketing', 'Content Creation', 'SEO/SEM', 'Analytics'],
            mentors: [
              { id: '8', name: 'ƒê·∫∑ng Do√£n Minh', avatar: '/Mentors/DDM.webp' }
            ]
          },
          {
            id: '6',
            title: 'Tam Ch√¢u - Agile Project Management',
            description: 'Tri·ªÉn khai ph∆∞∆°ng ph√°p qu·∫£n l√Ω d·ª± √°n Agile cho c√¥ng ty Tam Ch√¢u, n√¢ng cao hi·ªáu su·∫•t l√†m vi·ªác v√† delivery quality.',
            category: 'T∆∞ v·∫•n',
            status: 'completed',
            image: '/Projects/Tam-Chau.webp',
            slug: 'tam-chau-agile-management',
            technologies: ['Agile Methodology', 'Scrum Framework', 'Team Leadership'],
            mentors: [
              { id: '9', name: 'Ho√†ng Ch√¢u Long', avatar: '/Mentors/HCL.webp' }
            ]
          }
        ]
        
        return mockProjects
      }
      
      console.log('‚úÖ Projects fetched successfully:', data?.length || 0, 'records')
      return data || []
    } catch (error) {
      console.error('‚ùå Error fetching projects:', error)
      return []
    }
  },

  // Blog posts
  getBlogPosts: async (): Promise<BlogPost[]> => {
    try {
      console.log('üîç Starting getBlogPosts API call...')
      
      const supabase = createClient()
      const { data, error } = await supabase
        .from('allblogposts')
        .select('*')
        .order('publish_date', { ascending: false })
      
      console.log('üîç Blog posts query executed')
      console.log('üîç Error:', error)
      console.log('üîç Data:', data)
      console.log('üîç Data length:', data?.length || 0)
      
      if (error) {
        console.error('‚ùå Supabase error:', error)
        // If table doesn't exist or error, fallback to mock data
        console.log('‚ö†Ô∏è Supabase error, returning mock data for testing...')
        return getMockBlogPosts()
      }
      
      // If no data from Supabase, return mock data for testing
      if (!data || data.length === 0) {
        console.log('‚ö†Ô∏è No blog posts from Supabase, returning mock data for testing...')
        return getMockBlogPosts()
      }
      
      // Transform database data to match BlogPost interface
      const blogPosts: BlogPost[] = data.map((post: any) => ({
        id: post.id.toString(),
        title: post.title,
        content: post.details_blog,
        excerpt: post.excerpt,
        image: post.image,
        author: post.author,
        author_avatar: post.author_avatar,
        published_at: post.publish_date,
        publish_date: post.publish_date,
        read_time: post.read_time,
        category: post.category,
        slug: post.slug,
        tags: [] // Database doesn't have tags field, so empty array
      }))
      
      console.log('‚úÖ Blog posts fetched successfully:', blogPosts.length, 'records')
      return blogPosts
    } catch (error) {
      console.error('‚ùå Error fetching blog posts:', error)
      // Return mock data as fallback
      return getMockBlogPosts()
    }
  }
}

// Helper function to get mock blog posts
function getMockBlogPosts(): BlogPost[] {
  return [
    {
      id: '1',
      title: 'Kh√°m ph√° ph∆∞∆°ng ph√°p ASK - C√¥ng c·ª• m·∫°nh m·∫Ω ƒë·ªÉ n√¢ng cao hi·ªáu qu·∫£ giao ti·∫øp',
      content: 'Ph∆∞∆°ng ph√°p ASK (Acknowledge - Support - Know) l√† m·ªôt trong nh·ªØng c√¥ng c·ª• giao ti·∫øp hi·ªáu qu·∫£ nh·∫•t trong m√¥i tr∆∞·ªùng doanh nghi·ªáp...',
      excerpt: 'T√¨m hi·ªÉu v·ªÅ ph∆∞∆°ng ph√°p ASK v√† c√°ch ·ª©ng d·ª•ng trong giao ti·∫øp kinh doanh ƒë·ªÉ x√¢y d·ª±ng m·ªëi quan h·ªá b·ªÅn v·ªØng v·ªõi kh√°ch h√†ng v√† ƒë·ªëi t√°c.',
      image: '/News/ASK.webp',
      author: 'ƒê·∫∑ng Do√£n Minh',
      author_avatar: '/Mentors/DDM.webp',
      category: 'K·ªπ nƒÉng m·ªÅm',
      slug: 'phuong-phap-ask-giao-tiep-hieu-qua',
      published_at: '2024-09-15T10:00:00Z',
      publish_date: '2024-09-15T10:00:00Z',
      read_time: '5 ph√∫t ƒë·ªçc',
      tags: ['Giao ti·∫øp', 'K·ªπ nƒÉng m·ªÅm', 'ASK Method']
    },
    {
      id: '2',
      title: 'Ikigai - T√¨m ki·∫øm m·ª•c ƒë√≠ch s·ªëng v√† √Ω nghƒ©a trong c√¥ng vi·ªác',
      content: 'Ikigai l√† tri·∫øt l√Ω s·ªëng c·ªßa ng∆∞·ªùi Nh·∫≠t, gi√∫p ch√∫ng ta t√¨m ra l√Ω do t·ªìn t·∫°i v√† ƒë·ªông l·ª±c l√†m vi·ªác m·ªói ng√†y...',
      excerpt: 'Kh√°m ph√° tri·∫øt l√Ω Ikigai t·ª´ Nh·∫≠t B·∫£n v√† c√°ch √°p d·ª•ng ƒë·ªÉ t√¨m ra ƒëam m√™ th·ª±c s·ª±, x√°c ƒë·ªãnh m·ª•c ti√™u cu·ªôc s·ªëng v√† s·ª± nghi·ªáp.',
      image: '/News/ikigai.webp',
      author: 'Ho√†ng Ch√¢u Long',
      author_avatar: '/Mentors/HCL.webp',
      category: 'Ph√°t tri·ªÉn b·∫£n th√¢n',
      slug: 'ikigai-muc-dich-song-cong-viec',
      published_at: '2024-09-12T14:30:00Z',
      publish_date: '2024-09-12T14:30:00Z',
      read_time: '7 ph√∫t ƒë·ªçc',
      tags: ['Ikigai', 'Ph√°t tri·ªÉn b·∫£n th√¢n', 'M·ª•c ƒë√≠ch s·ªëng']
    },
    {
      id: '3',
      title: 'Kaizen - Ph∆∞∆°ng ph√°p c·∫£i ti·∫øn li√™n t·ª•c trong qu·∫£n l√Ω v√† ph√°t tri·ªÉn c√° nh√¢n',
      content: 'Kaizen kh√¥ng ch·ªâ l√† ph∆∞∆°ng ph√°p qu·∫£n l√Ω m√† c√≤n l√† c√°ch s·ªëng, gi√∫p ch√∫ng ta kh√¥ng ng·ª´ng c·∫£i thi·ªán b·∫£n th√¢n...',
      excerpt: 'T√¨m hi·ªÉu v·ªÅ tri·∫øt l√Ω Kaizen v√† c√°ch √°p d·ª•ng nguy√™n t·∫Øc c·∫£i ti·∫øn li√™n t·ª•c v√†o c√¥ng vi·ªác v√† cu·ªôc s·ªëng h√†ng ng√†y.',
      image: '/News/kaizen.webp',
      author: 'L√™ Ng·ªçc Th√†nh C√¥ng',
      author_avatar: '/Mentors/LNTC.webp',
      category: 'Qu·∫£n tr·ªã Nh√¢n s·ª±',
      slug: 'kaizen-cai-tien-lien-tuc',
      published_at: '2024-09-10T09:15:00Z',
      publish_date: '2024-09-10T09:15:00Z',
      read_time: '6 ph√∫t ƒë·ªçc',
      tags: ['Kaizen', 'C·∫£i ti·∫øn', 'Qu·∫£n l√Ω']
    },
    {
      id: '4',
      title: 'Trainer vs Mentor vs Coach - Ph√¢n bi·ªát vai tr√≤ v√† ch·ªçn ƒë√∫ng ph∆∞∆°ng ph√°p ph√°t tri·ªÉn',
      content: 'Trong th·∫ø gi·ªõi ph√°t tri·ªÉn nh√¢n s·ª± hi·ªán ƒë·∫°i, vi·ªác hi·ªÉu r√µ s·ª± kh√°c bi·ªát gi·ªØa Trainer, Mentor v√† Coach l√† v√¥ c√πng quan tr·ªçng...',
      excerpt: 'Ph√¢n t√≠ch chi ti·∫øt s·ª± kh√°c bi·ªát gi·ªØa ba vai tr√≤ quan tr·ªçng trong ph√°t tri·ªÉn nh√¢n s·ª± v√† c√°ch ch·ªçn ph∆∞∆°ng ph√°p ph√π h·ª£p.',
      image: '/News/trainer-mentor-coach.webp',
      author: 'Nguy·ªÖn C√¥ng Ti·∫øn',
      author_avatar: '/Mentors/NCT.webp',
      category: 'Coaching & Mentoring',
      slug: 'trainer-mentor-coach-phan-biet',
      published_at: '2024-09-08T16:45:00Z',
      publish_date: '2024-09-08T16:45:00Z',
      read_time: '8 ph√∫t ƒë·ªçc',
      tags: ['Trainer', 'Mentor', 'Coach', 'Ph√°t tri·ªÉn nh√¢n s·ª±']
    }
  ]
}

// Client API for user operations
export const apiClient = {
  register: async (userData: RegisterData) => {
    try {
      const supabase = createClient()
      
      // First, create user in Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: userData.email,
        password: userData.password,
        options: {
          data: {
            full_name: userData.fullName || userData.name,
            phone: userData.phone,
            university: userData.university,
            major: userData.major
          }
        }
      })

      if (authError) {
        console.error('Auth registration error:', authError)
        // If Supabase auth fails, try to insert directly into users table
        return await registerInUsersTable(userData)
      }

      // If auth succeeds, also try to save to users table for additional data storage
      if (authData.user) {
        try {
          const { error: userTableError } = await supabase
            .from('users')
            .insert([
              {
                id: authData.user.id,
                email: userData.email,
                name: userData.name,
                fullName: userData.fullName || userData.name,
                phone: userData.phone,
                university: userData.university,
                major: userData.major,
                role: 'user',
                status: 'active',
                avatar: null,
                password: null, // Don't store password in users table when using auth
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              }
            ])

          if (userTableError) {
            console.warn('Could not save to users table:', userTableError)
            // Continue anyway as auth registration succeeded
          } else {
            console.log('User data saved to users table successfully')
          }
        } catch (userTableError) {
          console.warn('Users table not accessible, continuing with auth only')
        }
      }

      return {
        success: true,
        data: {
          user: authData.user,
          session: authData.session
        }
      }
    } catch (error) {
      console.error('Registration error:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Registration failed'
      }
    }
  }
}

// Helper function for direct users table registration
async function registerInUsersTable(userData: RegisterData) {
  try {
    const supabase = createClient()
    
    // Check if email already exists
    const { data: existingUser } = await supabase
      .from('users')
      .select('email')
      .eq('email', userData.email)
      .single()

    if (existingUser) {
      return {
        success: false,
        error: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
      }
    }

    // Insert new user
    const { data, error } = await supabase
      .from('users')
      .insert([
        {
          email: userData.email,
          name: userData.name,
          fullName: userData.fullName || userData.name,
          phone: userData.phone,
          university: userData.university,
          major: userData.major,
          role: 'user',
          status: 'active',
          avatar: null,
          password: userData.password, // Store password when not using auth
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
      ])
      .select()
      .single()

    if (error) throw error

    return {
      success: true,
      data: {
        user: data,
        session: null
      }
    }
  } catch (error) {
    console.error('Users table registration error:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Registration failed'
    }
  }
}

export const authAPI = {
  login: async (email: string, password: string) => {
    try {
      console.log('üîê Starting login process for:', email)
      const supabase = createClient()
      
      // Try Supabase Auth with real accounts
      console.log('üîê Attempting Supabase Auth login...')
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email,
        password
      })

      if (authError) {
        console.log('‚ö†Ô∏è Supabase Auth failed:', authError.message)
        
        // Return error for real auth failure
        return {
          success: false,
          error: authError.message === 'Invalid login credentials' ? 
            'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c' : 
            authError.message
        }
      }

      console.log('‚úÖ Supabase Auth successful for user:', authData.user?.email)
      
      // Try to get additional user data from users table if exists
      try {
        const { data: userData } = await supabase
          .from('users')
          .select('*')
          .eq('email', email)
          .single()
          
        if (userData) {
          console.log('‚úÖ Found additional user data in users table')
          // Merge auth data with users table data
          return {
            success: true,
            data: {
              user: {
                ...authData.user,
                user_metadata: {
                  ...authData.user.user_metadata,
                  full_name: userData.fullName || userData.name || authData.user.user_metadata?.full_name,
                  phone: userData.phone || authData.user.user_metadata?.phone,
                  university: userData.university || authData.user.user_metadata?.university,
                  major: userData.major || authData.user.user_metadata?.major,
                  role: userData.role || authData.user.user_metadata?.role || 'user'
                }
              },
              session: authData.session
            }
          }
        }
      } catch (userTableError) {
        console.log('‚ö†Ô∏è Could not fetch additional user data, using auth data only')
      }
      
      // Return standard auth data if no additional user data found
      return {
        success: true,
        data: {
          user: authData.user,
          session: authData.session
        }
      }
    } catch (error) {
      console.error('‚ùå Login error:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p'
      }
    }
  },

  logout: async () => {
    try {
      const supabase = createClient()
      const { error } = await supabase.auth.signOut()
      
      if (error) throw error
      
      return { success: true }
    } catch (error) {
      console.error('Logout error:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Logout failed'
      }
    }
  },

  getCurrentUser: async (): Promise<UserData | null> => {
    try {
      const supabase = createClient()
      
      // First try to get user from Supabase Auth
      const { data: { user } } = await supabase.auth.getUser()
      
      if (user) {
        // If we have an authenticated user, try to get additional data from users table
        try {
          const { data: userData, error } = await supabase
            .from('users')
            .select('*')
            .eq('email', user.email)
            .single()

          if (!error && userData) {
            return {
              id: user.id,
              email: user.email || '',
              name: userData.name || user.user_metadata?.full_name || '',
              fullName: userData.fullName || user.user_metadata?.full_name || '',
              avatar: userData.avatar || user.user_metadata?.avatar_url,
              phone: userData.phone,
              university: userData.university,
              major: userData.major,
              role: userData.role,
              status: userData.status
            }
          }
        } catch (userTableError) {
          console.log('Users table not accessible, using auth data only')
        }

        // Fallback to auth data only
        return {
          id: user.id,
          email: user.email || '',
          name: user.user_metadata?.full_name || '',
          fullName: user.user_metadata?.full_name || '',
          avatar: user.user_metadata?.avatar_url
        }
      }
      
      return null
    } catch (error) {
      console.error('Get current user error:', error)
      return null
    }
  },

  updateProfile: async (updates: Partial<UserData>) => {
    try {
      const supabase = createClient()
      
      const { error } = await supabase.auth.updateUser({
        data: {
          full_name: updates.name,
          avatar_url: updates.avatar
        }
      })

      if (error) throw error
      
      return { success: true }
    } catch (error) {
      console.error('Update profile error:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Update failed'
      }
    }
  }
}

export default api